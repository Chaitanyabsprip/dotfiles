#!/bin/sh

# This is a script that formats anything that I type in the command line after
# the command and appends it to a notes.dump.md file in my notes folder. This
# makes it easy for me to create running notes and even dump my thoughts without
# having the hassle of opening vim and opening today's note.
#
# Usage:
#
# with quotes
# note "Whatever I type here will be appended to the notes.dump.md file."
#
# without quotes
# note A timestamp will also be added before the content of the note.
#
# The formatted content is also printed to the stdin using either glow, bat or
# cat.
#
# ------- MANDOC -------
#
# NAME
#
#     note - A simple note taking CLI tool
#
# SYNOPSIS
#
#     note [options]
#
# DESCRIPTION
#
#     note is a simple note taking program that allows you to create, view, and edit notes.
#
# OPTIONS
#
#     -h, --help
#         Show help message
#     -q, --quiet
#         Do not print any output
#     -b, --bookmark
#         Add the note to the bookmark list
#     -d, --dump
#         Dump the notes to a file
#     -t, --todo
#         Set the note as a todo item
#     -e, --edit
#         Edit the note in the default editor
#     -l, --local
#         Use a file local to current directory
#
# EXAMPLES
#
#     note "This is a note"
#     note -b "This is a bookmarked note"
#     note -d notes.md
#     note -t "This is a todo item"

_have() { type "$1" >/dev/null 2>&1; }

show_help() {
	echo 'Usage:'
	echo "    ${0##*/} [options]"
	echo ''
	echo 'Options:'
	echo '    -h,        Show help message'
	echo '    -q,        Be silent'
	echo '    -b,        Create a new bookmark'
	echo '    -d,        Create a new note in the dump file(default)'
	echo '    -t,        Create a new todo item'
	echo '    -e,        Edit the todo file in the default editor'
	echo '    -l,        Use a file local to current directory'
	echo '    -D,        Create a daily note'
	echo ''
	echo 'Examples:'
	echo "    ${0##*/} This is a note"
	echo "    ${0##*/} -b 'https://newbookmark.com'"
	echo "    ${0##*/} -t This is a new todo item"
}

setup_file() {
	filepath="$1"
	[ -f "$filepath" ] && return
	label="$2"
	dirpath="$(dirname "$filepath")"
	mkdir -pv "$dirpath"
	touch "$filepath"
	echo "# $(echo "$label" | awk '{ print toupper(substr($0, 1, 1)) substr($0, 2) }')" >"$filepath"
}

preview() {
	[ $QUIET = true ] && return
	content="$1"
	{ _have glow && echo "$content" | glow; } ||
		{ _have bat && echo "$content" | bat -p; } ||
		echo "$content" | cat
}

get_data() {
	data=""
	if [ -p /dev/stdin ]; then
		while IFS= read -r line; do data="$data\n$line"; done
	else
		data="$*"
	fi
	echo "$data"
}

last_heading() {
	filepath="$1"
	match="$(grep '^## .*' "$filepath" | tail -1)"
	echo "$match"
}

bookmark() {
	# 1. Should be indexed
	# 2. Should have tags and a title
	# ...
	# If a title is not given, potentially infer it by curling the website
	# use yaml as the format of storage
	# ...
	# 4.
	filepath="$NOTESPATH/notes.bookmarks.md"
	setup_file "$filepath" "To-do"

	[ "$EDIT" = true ] && exec $EDITOR "$filepath" && exit 0
	content="$1"
	[ -z "$content" ] && echo "Nothing to note here :shrug:" && exit 1

	last_date="$(last_heading "$filepath" | sed 's/## //')"
	if [ -z "$last_date" ]; then first_entry=true; fi
	datefmt="%a, %d %b %Y"
	datestamp="$(date "+$datefmt")"

	note="$content"
	if [ ! "$datestamp" = "$last_date" ] || [ "$first_entry" = true ]; then
		note="\n## $datestamp\n\n$note"
	fi
	echo "$note" >>"$filepath"

	todos="$(tail -n +"$(grep -n "$last_date" "$filepath" | tail -1 | cut -d : -f 1)" "$filepath")"
	preview "$todos"
}

dump() {
	filepath="${NOTE_FILEPATH:-"$NOTESPATH/notes.dump.md"}"
	label='Notes'
	[ -n "$NOTE_FILEPATH" ] && label='Done'
	setup_file "$filepath" "$label"

	[ "$EDIT" = true ] && exec $EDITOR "$filepath" && exit 0
	content="$1"
	[ -z "$content" ] && echo "Nothing to note here :shrug:" && exit 1

	last_date="$(last_heading "$filepath" | sed 's/## //')"
	if [ -z "$last_date" ]; then first_entry=true; fi
	if [ "$(date "+%M")" -gt 30 ]; then m='30'; else m='00'; fi
	datefmt="%a %b %d %Y %H:$m"
	datestamp="$(date "+$datefmt")"

	[ -n "$NOTE_FILEPATH" ] && content="- $content"
	note=$(
		echo "$content" |
			awk '{ print toupper(substr($0, 1, 1)) substr($0, 2) }' |
			fold -sw 80
	)
	if [ ! "$datestamp" = "$last_date" ] || [ "$first_entry" = true ]; then
		note="\n## $datestamp\n\n$note"
	fi
	echo "$note" >>"$filepath"

	dump="$(tail -n +"$(grep -n "$last_date" "$filepath" | tail -1 | cut -d : -f 1)" "$filepath")"
	preview "$dump"
}

todo() {
	# implement ability to tag todo?
	filepath="$NOTESPATH/notes.todo.md"
	setup_file "$filepath" "To-do"

	[ "$EDIT" = true ] && exec $EDITOR "$filepath" && exit 0
	content="$1"
	[ -z "$content" ] && echo "Nothing to note here :shrug:" && exit 1

	last_date="$(last_heading "$filepath" | sed 's/## //')"
	if [ -z "$last_date" ]; then first_entry=true; fi
	datefmt="%a, %d %b %Y"
	datestamp="$(date "+$datefmt")"

	note="- [ ] $(echo "$content" |
		awk '{ print toupper(substr($0, 1, 1)) substr($0, 2) }' |
		fold -sw 80)"
	if [ ! "$datestamp" = "$last_date" ] || [ "$first_entry" = true ]; then
		note="\n## $datestamp\n\n$note"
	fi
	echo "$note" >>"$filepath"

	todos="$(tail -n +"$(grep -n "$last_date" "$filepath" | tail -1 | cut -d : -f 1)" "$filepath")"
	preview "$todos"
}

daily() {
	today="$(date '+%Y-%m-%d')"
	today_long="$(date '+%B %m, %Y')"
	filepath="$NOTESPATH/transient/$today.md"
	[ ! -f "$filepath" ] && {
		setup_file "$filepath"
		template="# $today_long"
		echo "$template" >"$filepath"
	}
	[ "$EDIT" = true ] && exec $EDITOR "$filepath" && exit 0

	content="$1"
	[ -z "$content" ] && echo "Nothing to note here :shrug:" && exit 1
	note=$(
		echo "$content" |
			awk '{ print toupper(substr($0, 1, 1)) substr($0, 2) }' |
			fold -sw 80
	)
	echo "$note" >>"$filepath"

	preview "$(cat "$filepath")"
}

MODE='dump'
QUIET=false
EDIT=false
NOTESPATH="$HOME/projects/notes"
while getopts 'hqbdtelDc' opt; do
	case "$opt" in
	h) show_help ;;
	q) QUIET=true ;;
	b) MODE='bookmark' ;;
	d) MODE='dump' ;;
	t) MODE='todo' ;;
	e) EDIT=true ;;
	l) NOTESPATH="$(pwd)" ;;
	D) MODE='daily' ;;
	c) MODE='done' ;;
	\?) show_help && exit 1 ;;
	:)
		echo "Option -$OPTARG requires an argument" >&2
		show_help
		exit 1
		;;
	*) show_help && exit 1 ;;
	esac
done
shift $((OPTIND - 1))

content="$(get_data "$*" </dev/stdin)"

case $MODE in
bookmark) bookmark "$content" ;;
dump) dump "$content" ;;
todo) todo "$content" ;;
daily) daily "$content" ;;
done) NOTE_FILEPATH="$NOTESPATH/notes.done.md" dump "$content" ;;
*) show_help && exit 1 ;;
esac
