#!/bin/sh

have() { type "$1" >/dev/null 2>&1; }

distro() {
	if [ -f /etc/os-release ]; then
		. /etc/os-release
		DISTRO=$NAME
	elif type lsb_release >/dev/null 2>&1; then
		DISTRO=$(lsb_release -si)
	else
		DISTRO=$(uname -s)
	fi
	echo "$DISTRO"
}

# vim, git, which, openjdk-17-jdk, openjdk-17-jre-headless, zip, unzip
install_prerequisites() {
	have curl || echo "This script depends on curl"
	have sudo || echo "This script depends on sudo"
	case "$DISTRO" in
	Debian | Ubuntu) sudo apt install -yqq vim git zip unzip ;;
	Arch\ Linux) sudo pacman -S vim git which unzip zip --noconfirm ;;
	*) return 1 ;;
	esac
}

install_java() {
	have java && return 0
	case "$DISTRO" in
	Debian | Ubuntu) sudo apt -y install openjdk-17-jdk openjdk-17-jre-headless ;;
	Arch\ Linux) sudo pacman -S jdk17-openjdk jre17-openjdk-headless--noconfirm ;;
	*) return 1 ;;
	esac
}

install_sdkmanager() {
	url=https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS_VERSION}_latest.zip
	curl -s "$url" >./tools.zip &&
		echo "$ANDROID_SDK_TOOLS_CHECKSUM ./tools.zip" |
		sha256sum -c &&
		unzip -qq ./tools.zip -d "$ANDROID_HOME" &&
		rm -v ./tools.zip
}

setup_sdkmanager() {
	# accept all licenses
	licenses1="$(printf "8933bad161af4178b1185d1a37fbf41ea5269c55\nd56f5187479451eabf01fb78af6dfcb131a6481e\n24333f8a63b6825ea9c5514f83c2829b004d1fee")"
	licenses2="$(printf "84831b9409646a918e30573bab4c9c91346d8abd\n504667f4c0de7af1a06de9f4b1727b84351f2910")"
	mkdir -p "$ANDROID_HOME"/licenses/ &&
		echo "$licenses1" >"$ANDROID_HOME"/licenses/android-sdk-license &&
		echo "$licenses2" --licenses >"$ANDROID_HOME"/licenses/android-sdk-preview-license &&
		yes | sdkmanager --licenses --sdk_root="${ANDROID_SDK_ROOT}"

	packages="
build-tools;34.0.0
build-tools;33.0.2
build-tools;35.0.0-rc2
platforms;android-34
platforms;android-34-ext8
platforms;android-33
platform-tools
cmdline-tools;latest
extras;android;m2repository
extras;google;google_play_services
extras;google;m2repository
add-ons;addon-google_apis-google-24
"

	echo "$packages" >packages.txt
	sdkmanager --sdk_root="$ANDROID_SDK_ROOT" --update
	sdkmanager --sdk_root="$ANDROID_SDK_ROOT" --package_file=./packages.txt
	# while read -r pkg; do PKGS="${PKGS}${pkg} "; done <./packages.txt &&
	# 	echo "$PKGS" && sdkmanager --sdk_root="$ANDROID_SDK_ROOT" "$PKGS" && rm ./packages.txt

}

install_gradle() {
	curl -s "https://get.sdkman.io" | bash
	ls -la /root/.sdkman
	ls -la /root/.sdkman/bin
	cat /root/.sdkman/etc/config
	# shellcheck disable=SC1091
	. "${HOME}/.sdkman/bin/sdkman-init.sh" &&
		sdk install gradle "${GRADLE_VERSION}"
}

DISTRO="$(distro)"

case "$DISTRO" in
Debian | Ubuntu) export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64 ;;
Arch\ Linux) export JAVA_HOME=/usr/lib/jvm/java-17-openjdk ;;
*) return 1 ;;
esac

export ANDROID_SDK_TOOLS_VERSION=11076708
export ANDROID_SDK_TOOLS_CHECKSUM=2d2d50857e4eb553af5a6dc3ad507a17adf43d115264b1afc116f95c92e5e258
export ANDROID_HOME="$HOME"/programs/android
export ANDROID_SDK_ROOT="$HOME"/programs/android
export PATH="$PATH:$ANDROID_HOME/cmdline-tools/bin"
export PATH="$PATH:$ANDROID_SDK_ROOT/cmdline-tools/bin"
export PATH="$PATH:$ANDROID_SDK_ROOT/emulator"
export PATH="$PATH:$ANDROID_SDK_ROOT/platform-tools/"
export PATH="$PATH:$ANDROID_SDK_ROOT/tools/"
export PATH="$PATH:$ANDROID_SDK_ROOT/tools/bin/"
export GRADLE_VERSION=8.3

install_prerequisites
install_java
# shellcheck disable=SC2015
mkdir -p "$HOME"/programs/android && cd "$HOME"/programs || :
install_sdkmanager && setup_sdkmanager
install_gradle
